// Input



#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node *next;
};
struct node *start1=NULL;
struct node *start2=NULL;
struct node *create(struct node *start);
struct node *display(struct node * start);
struct node *sort(struct node *start);
struct node *reverse(struct node *start);
struct node *concat(struct node *start1,struct node *start2);

void main()
{
    int ch,n;
    while(1)
    {
        printf("\n\n1.create\t2.display\t3.sort\t4.reverse\t5.concat\t6.exit\n");
        printf("\nenter choice");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1: printf("\nlist 1");
                    start1=create(start1);
                    printf("\nlist 2");
                    start2=create(start2);
                    break;
            case 2: printf("\nlist 1");
                    start1=display(start1);
                    printf("\nlist 2");
                   start2=display(start2);
                   break;
            case 3: start1=sort(start1);
                    start2=sort(start2);
                    break;
            case 4: start1=reverse(start1);
                    start2=reverse(start2);
                    break;
            case 5 : start1=concat(start1,start2);
                        break;
            case 6: exit(0);
            default : printf("invalid");
        }
    }
}

struct node *create(struct node *start)
{
    struct node *newnode, *ptr;
    int num;
    printf("\nenter -1 to end");
    printf("\nenter num");
    scanf("%d",&num);
    while(num!=-1)
    {
        newnode=(struct node*)malloc(sizeof(struct node*));
        newnode->data=num;
        newnode->next=NULL;
        if(start==NULL)
            start=newnode;
        else
        {
            ptr=start;
            while(ptr->next!=NULL)
                ptr=ptr->next;
            ptr->next=newnode;
        }
        printf("\nenter num");
        scanf("%d",&num);

    }
    return start;

};

struct node *display(struct node *start)
{
     struct node *ptr;
     ptr=start;
     while(ptr->next!=NULL)
     {
         printf("\n%d",ptr->data);
          ptr=ptr->next;
     }
      printf("\n%d",ptr->data);
     return start;

};

struct node *sort(struct node *start)
{
    struct node *ptr1,*ptr2;
    ptr1=start;
    int temp;
    while(ptr1->next!=NULL)
    {
        ptr2=ptr1->next;
        while(ptr2!=NULL)
        {
            if(ptr1->data>ptr2->data)
            {
                temp=ptr1->data;
                ptr1->data=ptr2->data;
                ptr2->data=temp;

            }
            ptr2=ptr2->next;
        }
        ptr1=ptr1->next;
    }
    return start;

}

struct node *reverse(struct node *start)
{
    struct node *prev=NULL;
    struct node *ptr=start;
    struct node *next=NULL;
    while(ptr!=NULL)
    {
        next=ptr->next;
        ptr->next=prev;
        prev=ptr;
        ptr=next;
    }
    start=prev;
    return start;
}
struct node *concat(struct node *start1, struct node *start2)
 {
     struct node *ptr;
     ptr=start1;
     if(start1==NULL)
     {
        start1=start2;
     }
     else
     {
         while(ptr->next!=NULL)
         {
             ptr=ptr->next;
         }
         ptr->next=start2;
     }
     return start1;
 }



/*Output

1.create        2.display       3.sort  4.reverse       5.concat        6.exit

enter choice1

list 1
enter -1 to end
enter num3

enter num8

enter num1

enter num-1

list 2
enter -1 to end
enter num7

enter num9

enter num2

enter num-1


1.create        2.display       3.sort  4.reverse       5.concat        6.exit

enter choice2

list 1
3
8
1
list 2
7
9
2

1.create        2.display       3.sort  4.reverse       5.concat        6.exit

enter choice2

list 1
3
8
1
list 2
7
9
2

1.create        2.display       3.sort  4.reverse       5.concat        6.exit

enter choice3


1.create        2.display       3.sort  4.reverse       5.concat        6.exit

enter choice2

list 1
1
3
8
list 2
2
7
9

1.create        2.display       3.sort  4.reverse       5.concat        6.exit

enter choice4


1.create        2.display       3.sort  4.reverse       5.concat        6.exit

enter choice2

list 1
8
3
1
list 2
9
7
2

1.create        2.display       3.sort  4.reverse       5.concat        6.exit

enter choice5


1.create        2.display       3.sort  4.reverse       5.concat        6.exit

enter choice2

list 1
8
3
1
9
7
2
list 2
9
7
2

*/
